#pragma kernel Pooling

RWTexture2D<float4> InputTexture; // RGBA input texture
RWTexture2D<float4> OutputTexture; // Output texture
int width;
int height;

[numthreads(8, 8, 1)]
void Pooling (uint3 id : SV_DispatchThreadID)
{
    float amplifyFactor = 0.1;

    int2 pos = int2(id.xy * 2); // Multiply by 2 because of the stride

    float4 maxPixel = float4(0.0, 0.0, 0.0, 0.0);

    // Iterate over the 2x2 region, considering edge cases
    for (int y = 0; y < 2; y++)
    {
        for (int x = 0; x < 2; x++)
        {
            int2 currentPos = pos + int2(x, y);

            // Check if the current position is within the bounds of the texture
            if (currentPos.x < width && currentPos.y < height)
            {
                float4 currentPixel = InputTexture[currentPos];

                // Perform max pooling for each channel independently
                maxPixel.r = max(maxPixel.r, currentPixel.r);
                maxPixel.g = max(maxPixel.g, currentPixel.g);
                maxPixel.b = max(maxPixel.b, currentPixel.b);
                maxPixel.a = max(maxPixel.a, currentPixel.a);
            }
        }
    }

    OutputTexture[id.xy] = maxPixel;
}
